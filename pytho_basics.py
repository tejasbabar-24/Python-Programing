# -*- coding: utf-8 -*-
"""Pytho_Basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CewbDs8NJfbXV16FKCQEtgmPDZOeBgVr

#Concatenation of **String**
"""

a = '1234'
b= '456'
a+b

#Repeation

s = 'Spam'
print(s*4)

a = 'its rainy day'
 a*3

#Membership operator

s = 'spam'
'sp' in s

'map' not in s

"""#Indexing and Slicing

As Strings are orderd collections of charachters, we can acces their components by position

1]STRING IN PYTHON CAN BE SLICED TO GET THE PART OF THE STRING

2]INDEXES ARE CODED AS OFFSETS FROM THE FRONT, AND SO START FROM 0:THE FIRST ITEM IS AT INDEX 0,THE SECOND IS AT INDEX 1 AND SO ON
"""

P = 'Python'
p[0:4] # I WANT EVERYTHING FROM 0 TO (4-1)

len(p)
#length of p

#T
P[2]

P[5]

P[-1]

P[-4]

"""**Slicing**
#the general form
"""

a = 'Python Languae'

print(a[:])#everything
print(a[:6])
print(a[7:])
print(a[7:16])# start at 0 upto (16-1)15

name = 'Ranveer'

print(name[:3])
print(name[3:])

p = 'python'

p[-5:-2]

p[-3:]

p[1:-2]

"""#string is immutable-in place change are not possible"""

s = 'span'
s

s = 'z' + s[1:]
s

name = 'tejas'

name = 's' + name[1:]
name

"""extended slicing"""

a = 'abcdefghijklmno'

a[:] #default value for step is
print(a[::4])
print(a[0:6:2])

s = 'spam'
s[::-1]

p = 'Learing python is easy'

p[0:2]

p[-2:]

print(p[0:2]+p[-2:])

p = 'Python'
b = 'language'

print(b[:2])
print(p[1:])
print(b[:2]+p[1:])

print(p[0:2])
print(b[2:])
print(p[0:2]+b[2:])

print(b[:2]+p[1:] + p[0:2]+b[2:])

#return lowest index in b and on failulre -1

b = 'beutiful'
b.find('u')

#Replace

b.replace("ful",'less')

#Split
#Return a list of the substring in the string, using sep as the seprator string
r= 'a,bb,ccc,dddd'
r.split(sep=',')

#Strip - Return a copy of  the string with leading and trailing whitespace removed

a ='      sana    '
a.strip()

#Uppercase And Lowercase

name = 'tejas babar'

print(name.upper())
print(name.lower())
print(name.title())

#isdigit( return true if digit is present)

a = '12344'
a.isdigit()

#isalpha return true if alphabetic character is present

b = 'babar'
b.isalpha()

#String Formation

name = 'krish'
age = 14

formatted_string='my name is %s and i am %d year old'%(name,age)
print(formatted_string)

#using str.format{} method is more powerful and flexible compared to the % operator

formatted_string='my name is {} and i am {} year old'.format(name,age)
print(formatted_string)

